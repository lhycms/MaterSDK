'''
Author       : Liu Hanyu
Email        : hyliu2016@buaa.edu.cn
Date         : 2022-12-08 17:50:52
LastEditTime : 2022-12-08 20:48:53
FilePath     : /pflow/pflow/calculation/kpath/kpathSampler.py
Description  : 
'''
import os
from pymatgen.symmetry.kpath import KPathSetyawanCurtarolo

from ...io.publicLayer.structure import DStructure


class KpathSampler(KPathSetyawanCurtarolo):
    HIGHK_file_path = "./HIGHK"

    def __init__(self,
                structure:DStructure,
                symprec:float=0.1,
                angle_tolerance:float=5,
                atol:float=1e-5,
                ):
        '''
        Parameters
        ----------
            1. structure: DStructure
            2. symprec: float
            3. angle_tolerance: float
            4. atol: float
        '''
        super(KpathSampler, self).__init__(
                    structure=structure,
                    symprec=symprec,
                    angle_tolerance=angle_tolerance,
                    atol=atol,
                    )
        
        # 字典：{"高对称点": "坐标", ...}
        self.kpoints = self.get_kpoints()

    
    def output_HIGHK_file(self):
        '''
        Description
        -----------
            1. 根据 self.kpoints(dict)，生成 HIGHK 文件，存储高对称点和高对称点的坐标
                High symmetry kpoints generated by Q-Flow, structure:Mo1 S2, fractional coordinates in reciprocal lattice
                    0.000000     0.000000     0.000000    G
                    0.000000     0.000000     0.500000    A
                    0.333333     0.333333     0.500000    H
                    0.333333     0.333333     0.000000    K
                    0.500000     0.000000     0.500000    L
                    0.500000     0.000000     0.000000    M        
        '''
        if os.path.exists(self.HIGHK_file_path):
            os.remove(self.HIGHK_file_path)
        
        with open(self.HIGHK_file_path, "a") as f:
            f.write("High symmetry kpoints generated by PFlow, structure:{0}, fractional coordinates in reciprocal lattice\n".format(self.structure.formula))

            for tmp_kpoint in self.kpoints.keys():
                tmp_coord = self.kpoints[tmp_kpoint]
                f.write("    {0:>12.6f}{1:>12.6f}{2:>12.6f}\t{3}\n".format(
                                            tmp_coord[0],
                                            tmp_coord[1],
                                            tmp_coord[2],
                                            tmp_kpoint,
                                            )
                )



    def get_kpoints(self):
        '''
        Description
        ------------
            1. 
        
        Return 
        ------
            1. {高对称点(str): 坐标(np.array)}
            e.g.
                {'\\Gamma': array([0., 0., 0.]), 'A': array([0. , 0. , 0.5]), 'H': array([0.33333333, 0.33333333, 0.5       ]), 'K': array([0.33333333, 0.33333333, 0.        ]), 'L': array([0.5, 0. , 0.5]), 'M': array([0.5, 0. , 0. ])}
        
        Note
        ----
            1. 最后将 "\\Gamma" 置换成 "G"
        '''
        # 将 "\\Gamma" 置换成 "G"
        kpoint2coord = self.kpath["kpoints"]
        try:
            kpoint2coord.update({'G': kpoint2coord.pop('\\Gamma')})
        except:
            pass
        
        return kpoint2coord


    def get_kpath(self):
        '''
        Description
        ------------
            1. 

        Return 
        ------
            1. 多条高对称路径 (多个列表)
            e.g.
                [['\\Gamma', 'M', 'K', '\\Gamma', 'A', 'L', 'H', 'A'], ['L', 'M'], ['K', 'H']]
        
        Note
        ----
            1. 最后将 "\\Gamma" 置换成 "G"
        '''
        # 将所有路径中的 "\\Gamma" 置换成 "G"
        new_kpaths_lst = []

        for tmp_kpath in self.kpath["path"]:
            if "\\Gamma" in tmp_kpath:
                tmp_kpath_new = ["G" if tmp_point=="\\Gamma" else tmp_point \
                                    for tmp_point in tmp_kpath]
                new_kpaths_lst.append(tmp_kpath_new)
            else:
                new_kpaths_lst.append(tmp_kpath)

        return new_kpaths_lst